//-/////////////////////////////////////////////////////////////////////////////
//-                                                                           //
//-              This file is part of the Buildbotics firmware.               //
//-                                                                           //
//-                Copyright (c) 2015 - 2018, Buildbotics LLC                 //
//-                           All rights reserved.                            //
//-                                                                           //
//-   This file ("the software") is free software: you can redistribute it    //
//-   and/or modify it under the terms of the GNU General Public License,     //
//-    version 2 as published by the Free Software Foundation. You should     //
//-    have received a copy of the GNU General Public License, version 2      //
//-   along with the software. If not, see <http://www.gnu.org/licenses/>.    //
//-                                                                           //
//-   The software is distributed in the hope that it will be useful, but     //
//-        WITHOUT ANY WARRANTY; without even the implied warranty of         //
//-    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU      //
//-             Lesser General Public License for more details.               //
//-                                                                           //
//-     You should have received a copy of the GNU Lesser General Public      //
//-              License along with the software.  If not, see                //
//-                     <http://www.gnu.org/licenses/>.                       //
//-                                                                           //
//-              For information regarding this software email:               //
//-                "Joseph Coffland" <joseph@buildbotics.com>                 //
//-                                                                           //
//-/////////////////////////////////////////////////////////////////////////////

script#view-control-template(type="text/x-template")
  #control
    table.axes
      tr(:class="axes.klass")
        th.name Axis
        th.position Position
        th.absolute Absolute
        th.offset Offset
        th.state State
        th.actions
          button.pure-button(:disabled="!can_set_axis",
            title="Zero all axis offsets.", @click="zero()") &empty;

          button.pure-button(title="Home all axes.", @click="home()",
            :disabled="!is_idle")
            .fa.fa-home

      each axis in 'xyzabc'
        tr.axis(:class=`${axis}.klass`, v-if=`${axis}.enabled`,
          :title=`${axis}.title`)
          th.name= axis
          td.position: unit-value(:value=`${axis}.pos`, precision=4)
          td.absolute: unit-value(:value=`${axis}.abs`, precision=3)
          td.offset: unit-value(:value=`${axis}.off`, precision=3)
          td.state
            .fa(:class=`'fa-' + ${axis}.icon`)
            | {{#{axis}.state}}

          th.actions
            button.pure-button(:disabled="!can_set_axis",
              title=`Set {{'${axis}' | upper}} axis position.`,
              @click=`show_set_position('${axis}')`)
              .fa.fa-cog

            button.pure-button(:disabled="!can_set_axis",
              title=`Zero {{'${axis}' | upper}} axis offset.`,
              @click=`zero('${axis}')`) &empty;

            button.pure-button(:disabled="!is_idle", @click=`home('${axis}')`,
              title=`Home {{'${axis}' | upper}} axis.`)
              .fa.fa-home

            message(:show.sync=`position_msg['${axis}']`)
              h3(slot="header") Set {{'#{axis}' | upper}} axis position

              div(slot="body")
                .pure-form
                  .pure-control-group
                    label Position
                    input(v-model="axis_position",
                      @keyup.enter=`set_position('${axis}', axis_position)`)
                p

              div(slot="footer")
                button.pure-button(@click=`position_msg['${axis}'] = false`)
                  | Cancel

                button.pure-button(v-if=`${axis}.homed`,
                  @click=`unhome('${axis}')`) Unhome

                button.pure-button.button-success(
                  @click=`set_position('${axis}', axis_position)`) Set


            message(:show.sync=`manual_home['${axis}']`)
              h3(slot="header") Manually home {{'#{axis}' | upper}} axis

              div(slot="body")
                p Set axis absolute position.

                .pure-form
                  .pure-control-group
                    label Absolute
                    input(v-model="axis_position",
                      @keyup.enter=`set_home('${axis}', axis_position)`)

                p

              div(slot="footer")
                button.pure-button(@click=`manual_home['${axis}'] = false`)
                  | Cancel

                button.pure-button.button-success(
                  title=`Home {{'${axis}' | upper}} axis.`,
                  @click=`set_home('${axis}', axis_position)`) Set

    table.info
      tr
        th State
        td(:class="{attention: highlight_state}") {{mach_state}}

      tr
        th Message
        td.message(:class="{attention: highlight_state}")
          | {{message.replace(/^#/, '')}}

      tr(title="Active machine units")
        th Units
        td.mach_units {{mach_units}}

      tr(title="Active tool")
        th Tool
        td {{state.tool || 0}}

    table.info
      tr(
        title="Current velocity in {{metric ? 'meters' : 'inches'}} per minute")
        th Velocity
        td
          unit-value(:value="state.v", precision="2", unit="", iunit="",
            scale="0.0254")
          | {{metric ? ' m/min' : ' IPM'}}

      tr(title="Programmed feed rate.")
        th Feed
        td
          unit-value(:value="state.feed", precision="2", unit="", iunit="")
          | {{metric ? ' mm/min' : ' IPM'}}

      tr(title="Programed and actual speed.")
        th Speed
        td
          | {{state.speed || 0 | fixed 0}}
          span(v-if="!isNaN(state.s)") &nbsp;({{state.s | fixed 0}})
          = ' RPM'

      tr(title="Load switch states.")
        th Loads
        td
          span(:class="state['1oa'] ? 'load-on' : ''")
            | 1:{{state['1oa'] ? 'On' : 'Off'}}
          | &nbsp;
          span(:class="state['2oa'] ? 'load-on' : ''")
            | 2:{{state['2oa'] ? 'On' : 'Off'}}

    table.info
      tr
        th Remaining
        td(title="Total run time (days:hours:mins:secs)").
          #[span(v-if="remaining") {{remaining | time}} of]
          {{total_time | time}}
      tr
        th ETA
        td.eta {{eta}}
      tr
        th Line
        td
          | {{0 <= state.line ? state.line : 0 | number}}
          span(v-if="state.lines")
            | &nbsp;of {{state.lines | number}}
      tr
        th {{this.simulating ? 'Simulating' : 'Progress'}}
        td.progress
          label {{(progress || 0) | percent}}
          .bar(:style="'width:' + (progress || 0) * 100 + '%'")

    .override(title="Feed rate override.")
      label Feed
      input(type="range", min="0", max="2", step="0.01",
        v-model="feed_override", @change="override_feed")
      span.percent {{feed_override | percent 0}}

    .override(title="Spindle speed override.")
      label Speed
      input(type="range", min="0", max="2", step="0.01",
        v-model="speed_override", @change="override_speed")
      span.percent {{speed_override | percent 0}}

    .tabs
      input#tab1(type="radio", name="tabs" checked, @click="tab = 'auto'")
      label(for="tab1", title="Run GCode programs") Auto

      input#tab2(type="radio", name="tabs", @click="tab = 'mdi'")
      label(for="tab2", title="Manual GCode entry") MDI

      input#tab3(type="radio", name="tabs", @click="tab = 'jog'")
      label(for="tab3", "Jog the axes manually") Jog

      input#tab4(type="radio", name="tabs", @click="tab = 'messages'")
      label(for="tab4") Messages

      input#tab5(type="radio", name="tabs", @click="tab = 'indicators'")
      label(for="tab5") Indicators

      section#content1.tab-content.pure-form
        .toolbar.pure-control-group
          button.pure-button(:class="{'attention': is_holding}",
            title="{{is_running ? 'Pause' : 'Start'}} program.",
            @click="start_pause", :disabled="!state.queued").
            #[.fa(:class="is_running ? 'fa-pause' : 'fa-play'")]
            {{is_running ? 'Pause' : 'Run'}}

          button.pure-button(title="Stop program.", @click="stop").
            #[.fa.fa-stop] Stop


          button.pure-button(title="Pause program at next optional stop (M1).",
            @click="optional_pause", v-if="false").
            #[.fa.fa-stop-circle-o] Optional Pause

          button.pure-button(title="Execute one program step.", @click="step",
            :disabled="(!is_ready && !is_holding) || !state.queued",
            v-if="false").
            #[.fa.fa-step-forward] Step

          button.pure-button(title="Select a program.", @click="open",
            :disabled="!is_ready").
            #[.fa.fa-folder-open] Open

          button.pure-button(title="Edit program.", @click="edit",
            :disabled="!state.queued").
            #[.fa.fa-pencil] Edit

          button.pure-button(title="Open 3D view.", @click="view",
            :disabled="!state.queued").
            #[.fa.fa-eye] View

          .filename {{filename}}

        textarea.gcode-view(v-el:gcode-view)

      section#content2.tab-content
        .mdi.pure-form(title="Manual GCode entry.")
          button.pure-button(:disabled="!can_mdi",
            :class="{'attention': is_holding}",
            title="{{is_running ? 'Pause' : 'Start'}} command.",
            @click="mdi_start_pause")
            .fa(:class="is_running ? 'fa-pause' : 'fa-play'")

          button.pure-button(title="Stop command.", @click="stop")
            .fa.fa-stop

          input(v-model="mdi", :disabled="!can_mdi", @keyup.enter="submit_mdi")

        .history(:class="{placeholder: !history}")
          span(v-if="!history.length") MDI history displays here.
          ul
            li(v-for="item in history", @click="load_history($index)",
               track-by="$index")
              | {{item}}

      section#content3.tab-content
        .jog
          axis-control(axes="XY", :colors="['red', 'green']",
            :enabled="[x.enabled, y.enabled]",
            v-if="x.enabled || y.enabled", :adjust="jog_adjust")

          axis-control(axes="AZ", :colors="['orange', 'blue']",
            :enabled="[a.enabled, z.enabled]",
            v-if="a.enabled || z.enabled", :adjust="jog_adjust")

          axis-control(axes="BC", :colors="['cyan', 'purple']",
            :enabled="[b.enabled, c.enabled]",
            v-if="b.enabled || c.enabled", :adjust="jog_adjust")

        .jog-adjust
          | Fine adjust
          input(type="range", v-model="jog_adjust", min=1, max=100, step=1)

        center
          | Left click the axes above holding down the mouse button to jog the
          | machine.
        center Jogging speed is set by the ring that is clicked.

      section#content4.tab-content
        console

      section#content5.tab-content
        indicators(:state="state", :template="template")
